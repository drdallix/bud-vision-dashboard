
import { useEffect, useState } from 'react';
import { useParams, useSearchParams } from 'react-router-dom';
import { useRealtimeStrainStore } from '@/stores/useRealtimeStrainStore';
import { Strain } from '@/types/strain';

// JSON API endpoint for /api/strains/:id
export const StrainApiEndpoint = () => {
  const { id } = useParams();
  const [searchParams] = useSearchParams();
  const { strains, isLoading } = useRealtimeStrainStore(true);
  const [apiResponse, setApiResponse] = useState<any>(null);

  const format = searchParams.get('format') || 'json';
  const fields = searchParams.get('fields')?.split(',');

  useEffect(() => {
    if (isLoading) return;

    const strain = strains.find(s => s.id === id || s.name.toLowerCase().replace(/\s+/g, '-') === id);
    
    if (!strain) {
      setApiResponse({
        error: 'Strain not found',
        status: 404
      });
      return;
    }

    let response: any = {
      id: strain.id,
      name: strain.name,
      type: strain.type,
      thc: strain.thc,
      cbd: strain.cbd,
      description: strain.description,
      effects: strain.effectProfiles?.map(e => e.name) || [],
      flavors: strain.flavorProfiles?.map(f => f.name) || [],
      inStock: strain.inStock,
      scannedAt: strain.scannedAt,
      confidence: strain.confidence
    };

    // Filter fields if specified
    if (fields) {
      const filteredResponse: any = {};
      fields.forEach(field => {
        if (response[field] !== undefined) {
          filteredResponse[field] = response[field];
        }
      });
      response = filteredResponse;
    }

    setApiResponse({
      data: response,
      status: 200,
      disclaimer: "All information generated by AI • For recreation and enjoyment only • Not for medical purposes"
    });
  }, [id, strains, isLoading, format, fields]);

  if (isLoading) {
    return (
      <div className="p-4 bg-gray-900 text-green-400 font-mono">
        <pre>{JSON.stringify({ status: 'loading', message: 'Searching cannabis database...' }, null, 2)}</pre>
      </div>
    );
  }

  return (
    <div className="p-4 bg-gray-900 text-green-400 font-mono">
      <pre>{JSON.stringify(apiResponse, null, 2)}</pre>
    </div>
  );
};

// QR Code generator endpoint for /api/qr/:action
export const QRApiEndpoint = () => {
  const { action } = useParams();
  const [searchParams] = useSearchParams();
  
  const generateQRData = () => {
    const baseUrl = window.location.origin;
    
    switch (action) {
      case 'scan':
        return {
          url: `${baseUrl}/`,
          action: 'open_scanner',
          description: 'Open DoobieDB Package Scanner'
        };
      case 'strain':
        const strainId = searchParams.get('id');
        return {
          url: `${baseUrl}/strain/${strainId}`,
          action: 'view_strain',
          description: `View strain details for ${strainId}`
        };
      case 'menu':
        return {
          url: `${baseUrl}/menu`,
          action: 'view_menu',
          description: 'View DoobieDB Interactive Menu'
        };
      default:
        return {
          url: baseUrl,
          action: 'open_app',
          description: 'Open DoobieDB Cannabis Database'
        };
    }
  };

  const qrData = generateQRData();

  return (
    <div className="p-4 bg-gray-900 text-green-400 font-mono">
      <pre>{JSON.stringify(qrData, null, 2)}</pre>
    </div>
  );
};
