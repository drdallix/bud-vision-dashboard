
import { supabase } from '@/integrations/supabase/client';
import { Strain } from '@/types/strain';

export const analyzeStrainWithAI = async (imageData?: string, textQuery?: string, userId?: string) => {
  try {
    console.log('🔍 Starting AI strain analysis...', {
      hasImage: !!imageData,
      hasText: !!textQuery,
      userId: userId || 'anonymous'
    });
    
    if (!textQuery && !imageData) {
      throw new Error('Either text query or image data is required');
    }
    
    const requestBody: any = { 
      imageData: imageData || null,
      textQuery: textQuery || null
    };
    
    if (userId) {
      requestBody.userId = userId;
      console.log('📝 Including userId for database save:', userId);
    }
    
    console.log('🚀 Calling Supabase edge function with request:', {
      hasImage: !!requestBody.imageData,
      hasText: !!requestBody.textQuery,
      userId: requestBody.userId
    });
    
    const { data, error } = await supabase.functions.invoke('analyze-strain', {
      body: requestBody
    });

    if (error) {
      console.error('❌ Supabase function error:', error);
      throw error;
    }

    console.log('✅ AI analysis result received:', {
      name: data?.name,
      type: data?.type,
      thc: data?.thc,
      cbd: data?.cbd,
      descriptionLength: data?.description?.length || 0,
      confidence: data?.confidence,
      effectsCount: data?.effects?.length || 0,
      flavorsCount: data?.flavors?.length || 0
    });

    if (data.error) {
      console.error('❌ Edge function returned error:', data.error);
      if (data.fallbackStrain) {
        console.log('🔄 Using fallback strain:', data.fallbackStrain.name);
        return data.fallbackStrain;
      }
      throw new Error(data.error);
    }

    // CRITICAL: Use the AI-generated data directly without any local modifications
    console.log('🎯 Using AI-generated description directly:', {
      descriptionPreview: data.description?.substring(0, 100) + '...',
      thcFromAI: data.thc,
      source: 'OpenAI Edge Function'
    });

    // Return the data exactly as generated by the AI without any local processing
    return data;
    
  } catch (error) {
    console.error('💥 Error in AI strain analysis:', error);
    
    // Minimal fallback - let the calling component handle the error
    throw error;
  }
};
